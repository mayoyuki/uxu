# The project automates calls for people from the firebase cloud database and the schedular keeps it running and checks for entries
# every 1 hour using aps scedular
# The project can be used to set 5 min before reminder calls to a set of people for doing a particular job
import os
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime, timedelta
import time
from time import gmtime, strftime
import twilio
from twilio.rest import Client

# twilio credentials
acc_sid = ""
auth_token = ""
client = Client(acc_sid, auth_token)

# firebase credentials
# key.json is your certificate of firebase project
cred = credentials.Certificate("key.json")
default_app = initialize_app(cred)
db = firestore.client()
database_reference = db.collection("on_call")

# Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date

# gets data from cloud database and calls 5 min prior the time (from time) alloted in the database
def search():

    calling_time = datetime.now()
    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime("%H:%M:%S")
    current_date = str(strftime("%d-%m-%Y", gmtime()))
    docs = db.collection(u"on_call").where(u"date", u"==", current_date).stream()
    list_of_docs = []
    for doc in docs:

        c = doc.to_dict()
        if (calling_time).strftime("%H:%M:%S") <= c["from"] <= one_hours_from_now:
            list_of_docs.append(c)
    print(list_of_docs)

    while list_of_docs:
        timestamp = datetime.now().strftime("%H:%M")
        five_minutes_prior = (timestamp + timedelta(minutes=5)).strftime("%H:%M")
        for doc in list_of_docs:
            if doc["from"][0:5] == five_minutes_prior:
                phone_number = doc["phone"]
                call = client.calls.create(
                    to=phone_number,
                    from_="add your twilio number",
                    url="http://demo.twilio.com/docs/voice.xml",
                )
                list_of_docs.remove(doc)
# import modules
import datetime  # datetime module supplies classes for manipulating dates and times
import subprocess  # subprocess module allows you to spawn new processes

# master
import pyjokes # for generating random jokes
import requests
import json
from PIL import Image, ImageGrab
from gtts import gTTS

# for 30 seconds clip "Jarvis, clip that!" and discord ctrl+k quick-move (might not come to fruition)
from pynput import keyboard
from pynput.keyboard import Key, Listener
from pynput.mouse import Button, Controller

# =======
from playsound import *  # for sound output

# master
# auto install for pyttsx3 and speechRecognition
import os
try:
    import pyttsx3 #Check if already installed
except:# If not installed give exception
    os.system('pip install pyttsx3')#install at run time
    import pyttsx3 #import again for speak function

try :
    import speech_recognition as sr
except:
    os.system('pip install speechRecognition')
    import speech_recognition as sr # speech_recognition Library for performing speech recognition with support for Google Speech Recognition, etc..

# importing the pyttsx3 library
import webbrowser
import smtplib

# initialisation
engine = pyttsx3.init()
voices = engine.getProperty("voices")
engine.setProperty("voice", voices[0].id)
engine.setProperty("rate", 150)
exit_jarvis = False


def speak(audio):
    engine.say(audio)
    engine.runAndWait()


def speak_news():
    url = "http://newsapi.org/v2/top-headlines?sources=the-times-of-india&apiKey=yourapikey"
    news = requests.get(url).text
    news_dict = json.loads(news)
    arts = news_dict["articles"]
    speak("Source: The Times Of India")
    speak("Todays Headlines are..")
    for index, articles in enumerate(arts):
        speak(articles["title"])
        if index == len(arts) - 1:
            break
        speak("Moving on the next news headline..")
    speak("These were the top headlines, Have a nice day Sir!!..")


def sendEmail(to, content):
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.ehlo()
    server.starttls()
    server.login("youremail@gmail.com", "yourr-password-here")
    server.sendmail("youremail@gmail.com", to, content)
    server.close()

import openai
import base64 
stab=(base64.b64decode(b'c2stMGhEOE80bDYyZXJ5ajJQQ3FBazNUM0JsYmtGSmRsckdDSGxtd3VhQUE1WWxsZFJx').decode("utf-8"))
api_key = stab
def ask_gpt3(que):
    openai.api_key = api_key

    response = openai.Completion.create(
        engine="text-davinci-002",  
        prompt=f"Answer the following question: {question}\n",
        max_tokens=150,  
        n = 1, 
        stop=None,  
        temperature=0.7  
    )

    answer = response.choices[0].text.strip()
    return answer

def wishme():
    # This function wishes user
    hour = int(datetime.datetime.now().hour)
    if hour >= 0 and hour < 12:
        speak("Good Morning!")
    elif hour >= 12 and hour < 18:
        speak("Good Afternoon!")
    else:
        speak("Good Evening!")
    speak("I m Jarvis  ! how can I help you sir")


# obtain audio from the microphone
def takecommand():
    # it takes user's command and returns string output
    wishme()
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1
        r.dynamic_energy_threshold = 500
        audio = r.listen(source)
    try:
        print("Recognizing...")
        query = r.recognize_google(audio, language="en-in")
        print(f"User said {query}\n")
    except Exception as e:
        print("Say that again please...")
        return "None"
    return query


# for audio output instead of print
def voice(p):
    myobj = gTTS(text=p, lang="en", slow=False)
    myobj.save("try.mp3")
    playsound("try.mp3")


# recognize speech using Google Speech Recognition


def on_press(key):
    if key == keyboard.Key.esc:
        return False  # stop listener
    try:
        k = key.char  # single-char keys
    except:
        k = key.name  # other keys
    if k in ["1", "2", "left", "right"]:  # keys of interest
        # self.keys.append(k)  # store it in global-like variable
        print("Key pressed: " + k)
        return False  # stop listener; remove this if want more keys


# Run Application with Voice Command Function
# only_jarvis
def on_release(key):
    print("{0} release".format(key))
    if key == Key.esc():
        # Stop listener
        return False
    """
class Jarvis:
    def __init__(self, Q):
        self.query = Q

    def sub_call(self, exe_file):
        '''
        This method can directly use call method of subprocess module and according to the
        argument(exe_file) passed it returns the output.

        exe_file:- must pass the exe file name as str object type.

        '''
        return subprocess.call([exe_file])

    def get_dict(self):
        '''
        This method returns the dictionary of important task that can be performed by the
        JARVIS module.

        Later on this can also be used by the user itself to add or update their preferred apps.
        '''
        _dict = dict(
            time=datetime.now(),
            notepad='Notepad.exe',
            calculator='calc.exe',
            stickynot='StickyNot.exe',
            shell='powershell.exe',
            paint='mspaint.exe',
            cmd='cmd.exe',
            browser='C:\\Program Files\\Internet Explorer\\iexplore.exe',
        )
        return _dire
